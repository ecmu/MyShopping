name: Get MyShopping latest release version
on:
  schedule:
    - cron:  '0 6 * * *'
  workflow_dispatch:
jobs:
  get-version:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch release versions
        id: fetch_versions
        run: |
          echo "remote_version=$(curl -sL https://api.github.com/repos/sokolovromann/MyShopping/releases/latest | jq -r '.tag_name')" >>$GITHUB_ENV
          echo "local_version=$(curl -sL https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest | jq -r '.tag_name')" >>$GITHUB_ENV
      - name: Show versions
        #env:
        #  remote_version: ${{ steps.fetch_versions.outputs.remote_version }}
        #  local_version: ${{ steps.fetch_versions.outputs.local_version }}
        run: echo "local version ($local_version) vs remote version ($remote_version)."
      - name: Checkout
        if: env.remote_version != env.local_version
        uses: actions/checkout@v3
      #- name: Create new version release
      #  if: env.remote_version != env.local_version
      #  uses: ncipollo/release-action@v1
      #  with:
      #    allowUpdates: False
      #    tag: ${{ env.remote_version }}
      #    name: "Release build (${{ env.remote_version }})"
      #    omitBody: True
      #    token: ${{ secrets.GITHUB_TOKEN }}
      #- name: Create new version release
      #  if: env.remote_version != env.local_version
      #  uses: CupOfTea696/gh-action-auto-release@v1.0.0
      #  with:
      #    title: "Release: test"
      #    tag: ${{ env.remote_version }}
      #    draft: false
      #    #regex: "/^Release: #{semver}$/i"
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create new version release
        if: env.remote_version != env.local_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPO: ${{ secrets.GITHUB_TOKEN }}
        run: bash ./CreateNewRelease.sh
